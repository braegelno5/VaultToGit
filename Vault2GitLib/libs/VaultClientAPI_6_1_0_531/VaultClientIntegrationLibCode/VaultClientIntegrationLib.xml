<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VaultClientIntegrationLib</name>
    </assembly>
    <members>
        <member name="T:VaultClientIntegrationLib.FortressItemExpanded">
            <summary>
            This class encapsulates the information required to create or modify a bug tracking item.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.throwExceptions">
            <summary>
            A bool determining whether or not exceptions will be thrown if unrecognized string values are encountered by Fortress.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.ProjectName">
            <summary>
            The name of the project.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.ItemType">
            <summary>
            The bug tracking item type (i.e. Bug, Feature, etc).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Status">
            <summary>
            The status of the item (i.e. Open, Completed, In Progress, etc).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Platform">
            <summary>
            The platform for the item (i.e. Windows, Unix, Unknown, etc).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.TimeEstimate">
            <summary>
            [Note: Deprecated.  Use TimeEstimateValues / TimeEstimateUnitLabel.]  The estimated time to complete the item (i.e. Unknown, One Hour, One Month, etc).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.TimeEstimateValue">
            <summary>
            The estimated time to complete the item TimeEstimateValue = quantity (30).  Used in conjunction with TimeEstimateUnitLabel"
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.TimeEstimateUnitLabel">
            <summary>
            TimeEstimateUnitLabel = "week(s) | day(s) | hour(s) | minute(s).  Used in conjuction with TimeEstimateValue.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.DueDate">
            <summary>
            The date the item should be completed by.  Format is "yyyy-mm-dd".
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Assignee">
            <summary>
            The user the item is to be assigned to.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Resolver">
            <summary>
            The user set to resolve the item after completion.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Description">
            <summary>
            A description of the item.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Priority">
            <summary>
            The priority of the item (i.e. Unknown, Low, Urgent, etc).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Details">
            <summary>
            The details of the item.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.VersionStr">
            <summary>
            The version of the item.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Custom1">
            <summary>
            A custom field.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Custom2">
            <summary>
            A custom field.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Category">
            <summary>
            The category to which the item will belong.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.Milestone">
            <summary>
            The milestone to which the item will belong.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.FortressItemExpanded.UseHtmlInDetails">
            <summary>
            True to use html in the details section, false otherwise.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.FortressItemExpanded.#ctor">
            <summary>
            Creates a new FortressItemExpanded object.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.FortressItemExpanded.GetMantisItem">
            <summary>
            Creates a MantisItem from the FortressItemExpanded object.
            </summary>
            <returns>a MantisItem object</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.FortressItemExpanded.UpdateWithNewMantisItem(MantisLib.MantisItemFullDetail)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.FortressItemExpanded.Validate">
            <summary>
            Validates/constructs an item based on the information contained in the public fields.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.ItemTrackingOperations">
            <summary>
            Summary description for ItemTrackingOperations.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressProjects">
            <summary>
            Returns an array containing Fortress projects.
            </summary>
            <returns>An array of MantisProject objects describing all the Work Item projects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandQueryFortressItems(MantisLib.MantisItemQueryFilter,System.Boolean)">
            <summary>
            Returns an array of items matching the specifications of the query.
            </summary>
            <param name="qf">The MantisItemQueryFilter to process</param>
            <param name="sendDetails">True to include the details field in the returned items, false otherwise</param>
            <returns>An array of MantisItemExpanded objects matching the criteria of the query.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressCategories(System.String)">
            <summary>
            Lists the Work Item categories for a given project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>An array of MantisCategory objects describing all the categories for the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressCategories(System.Int32)">
            <summary>
            Lists the work item categories for a given project.
            </summary>
            <param name="projectID">The project id for which categories will be listed.</param>
            <returns>An array of MantisCategory objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressCustomLabels">
            <summary>
            Lists the work item custom labels.
            </summary>
            <returns>An array of MantisCustomLabel objects describing the work item custom labels.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressMilestones(System.String)">
            <summary>
            Lists all work item milestones for a given project.
            </summary>
            <param name="projectName">The name of the project.</param>
            <returns>An array of MantisMilestone objects describing all the milestones for the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressMilestones(System.Int32)">
            <summary>
            Lists all work item milestones for a given project.
            </summary>
            <param name="projectID">The project id for which milestones will be listed.</param>
            <returns>An array of MantisMilestone objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressPlatforms">
            <summary>
            Lists all work item platforms.
            </summary>
            <returns>An array of MantisPlatform objects describing all the platforms.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressPriorities">
            <summary>
            Lists all work item priorities.
            </summary>
            <returns>An array of MantisPriority objects describing all the priorities.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressStatuses">
            <summary>
            Lists all work item statuses.
            </summary>
            <returns>An array of MantisStatus objects describing all the statuses.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressTimeEstimates">
            <summary>
            Lists all work item time estimates.
            </summary>
            <returns>An empty array of MantisTimeEstimate objects describing all the time estimates.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressItemTypes">
            <summary>
            Lists all work item types.
            </summary>
            <returns>An array of MantisItemType objects describing all the item types.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressTimeUnits">
            <summary>
            Lists all work item time units
            </summary>
            <returns>An array of MantisTimeUnit objects describing all the time units.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressUsers(System.String)">
            <summary>
            Lists all Vault Pro users for a given project.
            </summary>
            <param name="projectName">The name of the project for which users will be listed.</param>
            <returns>An array of MantisUser objects describing all the users for the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressUsers(System.Int32)">
            <summary>
            Lists all Vault Pro users for a given project.
            </summary>
            <param name="projectID">The project id for which users will be listed.</param>
            <returns>An array of MantisUser objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressItemFullDetails(System.Int32)">
            <summary>
            Returns the full details of a given item.
            </summary>
            <param name="itemID">The id of the item for which full details will be returned.</param>
            <returns>A MantisItemFullDetail object describing the given item.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandFortressListAtAGlance(System.String)">
            <summary>
            Lists At A Glance information.
            </summary>
            <param name="projectName">The name of the project for which information will be listed.</param>
            <returns>An array of MilestoneAaG objects describing the at a glance information for each milestone in the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandFortressListAtAGlance(System.Int32)">
            <summary>
            Lists At A Glance information.
            </summary>
            <param name="projectID">The project id for which information will be listed.</param>
            <returns>An array of MilestoneAaG objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListOpenFortressItems(System.String)">
            <summary>
            Lists all open items for a given project.
            </summary>
            <param name="projectName">The name of the project for which items will be listed.</param>
            <returns>An array of MantisItemExpanded objects describing all the open items for the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListOpenFortressItems(System.Int32)">
            <summary>
            Lists all open items for a given project.
            </summary>
            <param name="projectID">The project id for which items will be listed.</param>
            <returns>An array of MantisItemExpanded objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListMyOpenFortressItems(System.String)">
            <summary>
            Lists the open bug tracking items for the user (currently logged in) for the given project.
            </summary>
            <param name="projectName">The name of the project for which items will be listed.</param>
            <returns>An array of MantisItemExpanded objects describing all the open items assigned to the user currently logged in for the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListMyOpenFortressItems(System.Int32)">
            <summary>
            Lists the open bug tracking items for the user (currently logged in) for the given project.
            </summary>
            <param name="projectID">The project id for which items will be listed.</param>
            <returns>An array of MantisItemExpanded objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressItemAttachmentInfo(System.Int32,System.Int32)">
            <summary>
            Returns an object containing the full info for a bug tracking item attachment.
            </summary>
            <param name="msgID">The message id.</param>
            <param name="attID">The attachment id.</param>
            <returns>A MantisItemAttachmentFullDetail object describing the work item attachment.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandModifyFortressItem(MantisLib.MantisItem)">
            <summary>
            Saves changes to an existing bug tracking item.
            </summary>
            <param name="item">The MantisItem which has been modified.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandAddFortressItem(VaultClientIntegrationLib.FortressItemExpanded)">
            <summary>
            Adds a new bug tracking item.
            </summary>
            <param name="item">The FortressItemExpanded to be added.</param>
            <returns>The new FortressItemExpanded.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandAddFortressItem(MantisLib.MantisItem)">
            <summary>
            Adds a new bug tracking item.
            </summary>
            <param name="item">The MantisItem to be added.</param>
            <returns>The new MantisItem.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandSaveNewFortressQuery(System.String,MantisLib.MantisItemQueryFilter)">
            <summary>
            Saves a new query as a SavedQuery object.
            </summary>
            <param name="queryName">The name of the query as a string.</param>
            <param name="qf">The MantisItemQueryFilter to be saved.</param>
            <returns>A SavedQuery object.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandRunSavedFortressQuery(System.String,System.String,System.Boolean)">
            <summary>
            Runs and returns the results of a given saved query.
            </summary>
            <param name="projectName">The name of the parent project.</param>
            <param name="queryName">The name of the saved query.</param>
            <param name="sendDetails">true to include the details field in the returned items, false otherwise.</param>
            <returns>An array of MantisItemExpanded objects matching the criteria of the given query.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandRunSavedFortressQuery(System.Int32,System.Boolean,MantisLib.SavedQuery)">
            <summary>
            Runs and returns the results of a given SavedQuery.
            </summary>
            <param name="qid">The id of the SavedQuery.</param>
            <param name="sendDetails">true to include the details field in the returned items, false otherwise.</param>
            <param name="sq">The SavedQuery object.</param>
            <returns>An array of MantisItemExpanded objects.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandModifySavedFortressQuery(MantisLib.SavedQuery)">
            <summary>
            Saves modifications to a SavedQuery object.
            </summary>
            <param name="sq">The SavedQuery object which has been modified.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressSavedQueries(System.String)">
            <summary>
            Returns an array of SavedQuery objects for the given project.
            
            Note:  The SavedQuery objects will only have the name and id fields set.  
            To get the MantisItemQueryFilter, use ProcessCommandGetFortressSavedQuery
            to retrieve the full object.
            </summary>
            <param name="projectName">The name of the project for which saved queries will be retrieved.</param>
            <returns>An array of SavedQuery objects describing the saved queries for the given project.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandListFortressSavedQueries(System.Int32)">
            <summary>
            Returns an array of SavedQuery objects for the given project id.
            
            Note:  The SavedQuery objects will only have the name and id fields set.  
            To get the MantisItemQueryFilter, use ProcessCommandGetFortressSavedQuery
            to retrieve the full object.
            </summary>
            <param name="projectID">The project id for which saved queries will be retrieved.</param>
            <returns>An array of SavedQuery objects</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandDeleteFortressQuery(System.Int32)">
            <summary>
            Deletes a query, given the query id.
            </summary>
            <param name="queryID">The id of the query to delete.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandGetFortressSavedQuery(System.Int32)">
            <summary>
            Retrieves a SavedQuery object given the query id.
            </summary>
            <param name="queryID">The id of the query to retrieve.</param>
            <returns>a SavedQuery object matching the given id.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandDownloadFortressAttachment(System.String,System.String,System.String,System.String)">
            <summary>
            Downloads the requested attachment to the given local path.
            </summary>
            <param name="msgID">The message id.</param>
            <param name="attID">The attachment id.</param>
            <param name="filename">The name of the file.</param>
            <param name="strReceivedFilePath">The local path to download the attachment to.</param>
            <returns>The path of the downloaded attachment as a string.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandAddFortressItemComment(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Adds a comment to an existing bug tracking item.
            </summary>
            <param name="bugID">The id of the bug to which the comment will be added.</param>
            <param name="subject">The subject for the comment.</param>
            <param name="comment">The comment to be added to the bug.</param>
            <param name="useHtml">True to use html, false otherwise.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandAddFortressItemComment(System.Int32,System.String,System.Boolean)">
            <summary>
            Adds a comment to an existing bug tracking item.
            </summary>
            <param name="bugID">The id of the bug to which the comment will be added.</param>
            <param name="comment">The comment to be added to the bug.</param>
            <param name="useHtml">True to use html, false otherwise.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandGetFortressLoggedInUserID">
            <summary>
            Returns the id of the user that is currently logged in.
            </summary>
            <returns>An int.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ItemTrackingOperations.ProcessCommandIsBugIDValid(System.Int32)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientIntegrationLib.RepositoryUtil">
            <summary>
            Summary description for RepositoryUtil.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.ValidateReposPath(System.String)">
            <summary>
            Validates a repository path in a very basic way.  All repository paths must start with 
            $, and if there is more than one character, the second character must be /
            Throws a UsageException if given a path that doesn't meet the requirements.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.CleanUpPathAndReturnRepositoryPath(System.String)">
            <summary>
            Returns the repository path associated with the input path.  Returns null if the path does not map to a repository path.
            </summary>
            <param name="testPath">May be either a local disk path, or a repository path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.PathExists(System.String)">
            <summary>
            Returns true if an object exists at the given path.
            </summary>
            <param name="testPath">This path can either be a repository path or a disk path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.FindVaultTreeObjectsByObjID(System.Int64)">
            <summary>
            Searches for all objects with the given object id.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.FindVaultTreeObjectAtReposOrLocalPath(System.String)">
            <summary>
            Searches for the Vault object at the given path.  Throws an exception if no object can be found.
            </summary>
            <param name="testPath">This path can either be a repository path or a disk path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.FindVaultFolderAtReposOrLocalPath(System.String)">
            <summary>
            Searches for the Vault folder at the given path.  Throws an exception if no object can be found, or if a file is there.
            </summary>
            <param name="testPath">This path can either be a repository path or a disk path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.FindVaultFileAtReposOrLocalPath(System.String)">
            <summary>
            Searches for the Vault file at the given path.  Throws an exception if no object can be found, or if a folder is there.
            </summary>
            <param name="testPath">This path can either be a repository path or a disk path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.GetFakeLabelParent(VaultClientOperationsLib.VaultClientFile,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="file"></param>
            <param name="currentPath"></param>
            <param name="labelName"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.CheckForWorkingFolder(VaultClientOperationsLib.VaultClientTreeObject,System.Boolean)">
            <summary>
            Checks that a working folder is set for the object.  Throws an exception if no working folder is set.
            </summary>
            <param name="obj"></param>
            <param name="isCheckout">Changes the wording of the exception message.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.NormalizeFolderPath(System.String)">
            <summary>
            Removes trailing path delimiters from a folder path.
            </summary>
            <param name="folderPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.Refresh">
            <summary>
            Calls clientInstance.Refresh()
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.GetObjectsByName(VaultClientOperationsLib.VaultClientFolder,System.String,System.Boolean)">
            <summary>
            Returns an array filled with all objects that match the name passed in
            </summary>
            <param name="folder"></param>
            <param name="name"></param>
            <param name="recursive"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)">
            <summary>
            
            </summary>
            <param name="repositoryPath"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.RepositoryUtil.GetCommonParent(System.Collections.ArrayList)">
            <summary>
            
            </summary>
            <param name="arrayOfVaultFiles"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientIntegrationLib.GetOptions">
            <summary>
            This class encapsulates all of the options that can be passed into a simple get
            request.  When a new GetOptions is constructed, it is prefilled with the user's current options.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOptions.#ctor">
            <summary>
            Create a new GetOptions object.  When a new GetOptions is constructed, it is prefilled with the user's current options.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOptions.GetUserOptionsCollection">
            <summary>
            Returns the user options collection containing the get options.
            </summary>
            <returns>A UserOptionsCollection object.</returns>
        </member>
        <member name="F:VaultClientIntegrationLib.GetOptions.Merge">
            <summary>
            Controls how and if files that have been modified locally are replaced with versions from the repository.
            Possible values are:  "OverwriteWorkingCopy", "MergeLater", "AttemptAutomaticMerge", and "Unspecified".
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.GetOptions.Recursive">
            <summary>
            Controls if folders are recursively fetched.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.GetOptions.MakeWritable">
            <summary>
            Controls if files are marked as writable when fetched.
            Possible values are:  "MakeNonMergableFilesReadOnly", "MakeAllFilesReadOnly", and "MakeAllFilesWritable".
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.GetOptions.SetFileTime">
            <summary>
            Controls the date placed in the file's Last Modified attribute.
            Possible values are:  "Current", "Modification", and "CheckIn".
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.GetOptions.PerformDeletions">
            <summary>
            Controls if files which are deleted, moved or renamed in the repository are deleted, moved
            or renamed on disk when the get is completed.  This option is ignored for get operations 
            to locations outside of working folders.
            Possible values are:  "RemoveWorkingCopy", "DoNotRemoveWorkingCopy", and "RemoveWorkingCopyIfUnmodified".
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.GetOptions.OverrideEOL">
            <summary>
            Mergable files will be converted to the given line-ending type when fetched.
            Available types are: "None", "Native", "CR", "LF", or "CRLF".
            "none" means "don't override".
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.GetOperations">
            <summary>
            Summary description for GetOperations.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGet(System.String[],VaultClientIntegrationLib.GetOptions)">
            <summary>
            Gets the latest version of Vault objects to a working folder.  This method requires that a working folder
            is already set for the objects to be downloaded.
            </summary>
            <param name="objectPaths">An array of paths to get.  These can be either local paths or repository paths.  If they are repository paths, wildcards can be included.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetToLocationOutsideWorkingFolder(System.String[],VaultClientIntegrationLib.GetOptions,System.String)">
            <summary>
            Gets the latest version of Vault objects to a location outside of a working folder.  If you use this method to download
            an object, you will not be able to check in from the that folder on disk.  If you will need to check in from this location,
            use ProcessCommandGet instead.
            </summary>
            <param name="objectPaths">An array of paths to get.  These can be either local paths or repository paths.  If they are repository paths, wildcards can be included.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
            <param name="destPath">The location on disk where the downloaded files will be placed.  You will not be able to check in from this location.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetLabelToLocationOutsideWorkingFolder(System.String,System.String,System.String,VaultClientIntegrationLib.GetOptions,System.String)">
            <summary>
            Get the version of a Vault object which has the provided label.  This method will download the Vault objects into a non 
            working folder.  If you use this method to download objects, you will not be able to check in from the that folder on disk.  
            If you will need to check in from this location, use ProcessCommandGetLabelToTempWorkingFolder instead.
            </summary>
            <param name="objectPath">The path to an object.  This can be either a local path or a repository path.</param>
            <param name="label">The label that was applied to the object.</param>
            <param name="labelSubItem">If the specified item is shared to multiple places in the label, use this parameter to specify which subitem to download.  Can (and usually should) be null.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
            <param name="destPath">The location on disk where the downloaded files will be placed.  You will not be able to check in from this location.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetLabelToTempWorkingFolder(System.String,System.String,System.String,VaultClientIntegrationLib.GetOptions,System.String)">
            <summary>
            Get the version of a Vault object which has the provided label.  This method will download the Vault object into a temporary 
            working folder.  If you use this method to download objects, you will not be able to check in from the that folder on disk.
            </summary>
            <param name="objectPath">The path to an object.  This can be either a local path or a repository path.</param>
            <param name="label">The label that was applied to the object.</param>
            <param name="labelSubItem">If the specified item is shared to multiple places in the label, use this parameter to specify which subitem to download.  Can (and usually should) be null.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
            <param name="tmpWorkingFolder">The location on disk where the downloaded files will be placed.  You will not be able to check in from this location.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetVersion(System.String,System.Int32,VaultClientIntegrationLib.GetOptions)">
            <summary>
            Get a specific version of a Vault object.  
            This method will download the object into the working folder that has been set.
            This method requires that a working folder
            is already set for the objects to be downloaded.
            </summary>
            <param name="objectPath">The path to an object.  This can be either a local path or a repository path.</param>
            <param name="version">The version of the object that will be downloaded.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetVersionToLocationOutsideWorkingFolder(System.String,System.Int32,VaultClientIntegrationLib.GetOptions,System.String)">
            <summary>
            Get a specific version of a Vault object to a location outside of a working folder.  If you use this method to download
            an object, you will not be able to check in from the that folder on disk.  If you will need to check in from this location,
            use ProcessCommandGetVersion instead.
            </summary>
            <param name="objectPath">The path to an object.  This can be either a local path or a repository path.</param>
            <param name="version">The version of the object that will be downloaded.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
            <param name="destPath">The location on disk where the downloaded files will be placed.  You will not be able to check in from this location.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetWildcard(System.String,System.String[],VaultClientIntegrationLib.GetOptions)">
            <summary>
            GETWILDCARD will retrieve all files within the folder specified by
            repositoryfolder whose name matches one of the wildcards specified.
            You may use '?' to match a single character or '*' to match a range of
            characters.  This method requires that a working folder
            is already set for the objects to be downloaded.
            </summary>
            <param name="folderPath">The path to an folder.  This can be either a local path or a repository path.</param>
            <param name="wildcardArray">An array of strings that will be used as wildcards to match.  You may use '?' to match a single character or '*' to match a range of characters.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.GetOperations.ProcessCommandGetWildcardToNonWorkingFolder(System.String,System.String[],VaultClientIntegrationLib.GetOptions,System.String)">
            <summary>
            GETWILDCARD will retrieve all files within the folder specified by
            repositoryfolder whose name matches one of the wildcards specified.
            You may use '?' to match a single character or '*' to match a range of
            characters.  If you use this method to download an object, you will not be 
            able to check in from the that folder on disk.  If you will need to 
            check in from this location, use ProcessCommandGetVersion instead.
            </summary>
            <param name="folderPath">The path to an folder.  This can be either a local path or a repository path.</param>
            <param name="wildcardArray">An array of strings that will be used as wildcards to match.  You may use '?' to match a single character or '*' to match a range of characters.</param>
            <param name="getOptions">The options that will control how the get is performed.</param>
            <param name="destPath">The location on disk where the downloaded files will be placed.  You will not be able to check in from this location.</param>
        </member>
        <member name="T:VaultClientIntegrationLib.GroupComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.GroupComparer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.GroupComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientIntegrationLib.ReverseHistoryItemComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ReverseHistoryItemComparer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ReverseHistoryItemComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientIntegrationLib.UserItemComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.UserItemComparer.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.UserItemComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:VaultClientIntegrationLib.LoginOptions">
            <summary>
            This class encapsulates all the options related to a login operation.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.AccessLevel">
            <summary>
            Controls whether to attempt an admin-level connection.  Some operations, such as creating a repository
            require Global Admin permissions.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.URL">
            <summary>
            The URL of the server to connect to.  For example: "http://hostname/VaultService/"
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.User">
            <summary>
            The user name used to connect
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.Password">
            <summary>
            The repository name to use to validate the user's access.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.Repository">
            <summary>
            The repository that will set as the active repository.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.ProxyServer">
            <summary>
            
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.ProxyPort">
            <summary>
            
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.ProxyUser">
            <summary>
            
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.ProxyPassword">
            <summary>
            
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.LoginOptions.ProxyDomain">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.ClientConnection">
            <summary>
            This class encapsulates one Vault server connection.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.Comment">
            <summary>
            A comment to be included on checkin operations.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.bugIDs">
            <summary>
            An array of integers which can be set to include bug ids in a checkin transaction.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.markBugFixed">
            <summary>
            A boolean which determines if bugs included in a checkin will be marked completed/fixed.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.addBugComment">
            <summary>
            A boolean which determines if bug information will be appended to the checkin comments.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.LoginOptions">
            <summary>
            The login options for this connection.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.AutoCommit">
            <summary>
            Controls if operations are auto-commited (if possible).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.ClientConnection.Verbose">
            <summary>
            Controls if all messages are written (true) or just errors (false).
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ClientConnection.HandleEvent(VaultClientOperationsLib.MessageEvent)">
            <summary>
            MessageEvent handler.  Writes the message if Verbose is true or the message level is error.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ClientConnection.HandleEvent(VaultClientOperationsLib.BulkMessageEvent)">
            <summary>
            BulkMessageEvent handler.  Writes the message if Verbose is true or the message level is error.
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.ClientConnection.ClientInstance">
            <summary>
            Get or set the ClientInstance object.
            </summary>
        </member>
        <member name="P:VaultClientIntegrationLib.ClientConnection.Cloaks">
            <summary>
            Get/set the collection of cloaks.
            </summary>
        </member>
        <member name="P:VaultClientIntegrationLib.ClientConnection.MakeBackups">
            <summary>
            Get or set option that determines if the server makes backups of files when changes are undone.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.UnchangedHandler">
            <summary>
            Controls how unchanged files are handled.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.UnchangedHandler.LeaveCheckedOut">
            <summary>
            Leave unchanged files checked out.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.UnchangedHandler.Checkin">
            <summary>
            Checkin unchanged files.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.UnchangedHandler.UndoCheckout">
            <summary>
            Undo the checkout on unchanged files.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.ServerOperations">
            <summary>
            Summary description for ServerOperations.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.GetInstance">
            <summary>
            Returns an instance of ServerOperations.
            </summary>
            <returns>A ServerOperations object.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandAdd(System.String,System.String[])">
            <summary>
            Add local items to the Vault repository into the given folder
            </summary>
            <param name="folderPath">The folder where the items should be added.  This can be either a local path or a server path.</param>
            <param name="localItemsToAdd">An array of local paths that should be added to the folder given.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandBlame(System.String,System.Int64,System.Int32,System.Int32)">
            <summary>
            Return details about the last time a line was changed in a region of a file.
            </summary>
            <param name="objectPath">The file whose history will be examined.  This can be either a local path or a server path.</param>
            <param name="version">The newest version of the file that will be examined for changes.  Passing -1 for this parameter chooses the latest version in the repository.</param>
            <param name="startlinenumber">The first line of the region of interest in the file.</param>
            <param name="endlinenumber">The last line of the region of interest in the file. Passing zero or a value less than startlinenumber is equivalant to passing in the same value as startlinenumber.</param>
            <returns>A VaultBlameRegionResponse describing the last transaction which changed the described region of the file.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandBranch(System.String,System.String)">
            <summary>
            Branch an item from one location to another.
            </summary>
            <param name="objectPath_From">The path to the object that will be branched.  This can be either a local path or a server path.</param>
            <param name="objectPath_To">The path to the new location for the branch.  This path should not exist in the repository.  The last segment of this path will be the new name of the branched folder.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandBranchFromLabel(System.String,System.String,System.String)">
            <summary>
            Branch an item from one location to another (based on a label).
            </summary>
            <param name="objectPath_From">The path to the object that will be branched.  This can be either a local path or a server path.</param>
            <param name="objectPath_To">The path to the new location for the branch.  This path should not exist in the repository.  The last segment of this path will be the new name of the branched folder.</param>
            <param name="label">The label to use as the branch point.  Only the initial version of the label will be branched.  No label promotions will be branched.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCheckout(System.String[],System.Boolean,System.Boolean,VaultClientIntegrationLib.GetOptions)">
            <summary>
            Checkout a collection of Vault objects
            </summary>
            <param name="objectPaths">An array of paths to Vault objects.  These paths can be either local or repository paths.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="checkoutExclusive">If this parameter is true, exclusive checkout will be requested for all objects.</param>
            <param name="getLatest">
               If true, the latest version of the file(s) will be got after the checkout.
               You can't just set getOptions to null; getOptions.Recursive is used during the checkout.
            </param>
            <param name="getOptions">The options that will control how the get is performed.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCloak(System.String[])">
            <summary>
            Cloak the given paths.
            </summary>
            <param name="objectPaths">An array of folder paths.  These can be either local paths or repository paths</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCommit(VaultClientOperationsLib.ChangeSetItemColl,VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,System.Boolean)">
            <summary>
            This method is for Eclipse.  Mainwin can't handle out params so we are just wrapping the call and passing a dummy ChangeSetItemColl 
            since the out param was added to fix a clc bug.
            </summary>
            <param name="csic"></param>
            <param name="unchanged"></param>
            <param name="keepCheckedOut"></param>
            <param name="localCopy"></param>
            <param name="removeLocalCopy"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCommit(VaultClientOperationsLib.ChangeSetItemColl,VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl@)">
            <summary>
            
            </summary>
            <param name="csic"></param>
            <param name="unchanged"></param>
            <param name="keepCheckedOut"></param>
            <param name="localCopy"></param>
            <param name="removeLocalCopy"></param>
            <param name="csicRemove"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCommit(VaultClientOperationsLib.ChangeSetItemColl,VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,System.Boolean,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl@)">
            <summary>
            
            </summary>
            <param name="csic"></param>
            <param name="unchanged"></param>
            <param name="keepCheckedOut"></param>
            <param name="localCopy"></param>
            <param name="removeLocalCopy"></param>
            <param name="resolveMerge"></param>
            <param name="csicRemove"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCheckIn(System.String[],VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,System.Boolean)">
            <summary>
            Commit pending operations at or underneath an array of Vault object paths.
            </summary>
            <param name="objectPaths">An array of paths to Vault objects.  These paths can be either local or repository paths.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="unchanged">Controls how unchanged files are treated.  Possible values are:  "LeaveCheckedOut", "Checkin", and "UndoCheckout".</param>
            <param name="keepCheckedOut">Inform the server that you wish to retain the checkout on items.</param>
            <param name="localCopy">If unchanged is UnchangedHandler.UndoCheckOut, this parameter controls what is done with any modified local files that are present in the working folder.  Possible values are:  "Replace", "Delete", and "Leave".</param>
            <param name="resolveMerge">If true, will resolve the merge status on all files with Needs Merge status before check in.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCheckIn(System.String[],VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType)">
            <summary>
            Commit pending operations at or underneath an array of Vault object paths.
            </summary>
            <param name="objectPaths">An array of paths to Vault objects.  These paths can be either local or repository paths.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="unchanged">Controls how unchanged files are treated.  Possible values are:  "LeaveCheckedOut", "Checkin", and "UndoCheckout".</param>
            <param name="keepCheckedOut">Inform the server that you wish to retain the checkout on items.</param>
            <param name="localCopy">If unchanged is UnchangedHandler.UndoCheckOut, this parameter controls what is done with any modified local files that are present in the working folder.  Possible values are:  "Replace", "Delete", and "Leave".</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCheckin(System.String[],VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,System.Boolean)">
            <summary>
            Commit pending operations at or underneath an array of Vault object paths.
            </summary>
            <param name="objectPaths">An array of paths to Vault objects.  These paths can be either local or repository paths.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="unchanged">Controls how unchanged files are treated.  Possible values are:  "LeaveCheckedOut", "Checkin", and "UndoCheckout".</param>
            <param name="keepCheckedOut">Inform the server that you wish to retain the checkout on items.</param>
            <param name="localCopy">If unchanged is UnchangedHandler.UndoCheckOut, this parameter controls what is done with any modified local files that are present in the working folder.  Possible values are:  "Replace", "Delete", and "Leave".</param>
            <param name="resolveMerge">If true, will resolve the merge status on all files with Needs Merge status before check in.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCommit(System.String[],VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,VaultClientOperationsLib.ChangeSetItemColl@)">
            <summary>
            Commit pending operations at or underneath an array of Vault object paths.
            </summary>
            <param name="objectPaths">An array of paths to Vault objects.  These paths can be either local or repository paths.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="unchanged">Controls how unchanged files are treated.</param>
            <param name="keepCheckedOut">Inform the server that you wish to retain the checkout on items.</param>
            <param name="localCopy">If unchanged is UnchangedHandler.UndoCheckOut, this parameter controls what is done with any modified local files that are present in the working folder.</param>
            <param name="csicRemove"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCommit(System.String[],VaultClientIntegrationLib.UnchangedHandler,System.Boolean,VaultClientOperationsLib.LocalCopyType,System.Boolean,VaultClientOperationsLib.ChangeSetItemColl@)">
            <summary>
            Commit pending operations at or underneath an array of Vault object paths.
            </summary>
            <param name="objectPaths">An array of paths to Vault objects.  These paths can be either local or repository paths.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="unchanged">Controls how unchanged files are treated.</param>
            <param name="keepCheckedOut">Inform the server that you wish to retain the checkout on items.</param>
            <param name="localCopy">If unchanged is UnchangedHandler.UndoCheckOut, this parameter controls what is done with any modified local files that are present in the working folder.</param>
            <param name="resolveMerge">If true, will resolve the merge status on all files with Needs Merge status before check in.</param>
            <param name="csicRemove"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandCreateFolder(System.String)">
            <summary>
            Create a new folder in the given location.
            </summary>
            <param name="newFolderPath">The path to the location for the new folder.  This can be either a local path or a repository path.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandDelete(System.String[])">
            <summary>
            Delete objects from the Vault tree.
            </summary>
            <param name="objectPaths">An array of object paths.  These can be either local or repository paths.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandDeleteLabel(System.String,System.String)">
            <summary>
            Delete a label that has been applied to a Vault object
            </summary>
            <param name="objectPath">The path to the object that has been labeled.  This can be either a repository or a local path.</param>
            <param name="labelName">The label that will be deleted from the object.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandDiff(System.String,System.String,VaultClientIntegrationLib.CompareToOption,System.Boolean,System.String,System.String)">
             <summary>
             Launch a diff program to compare a file or folder.
             </summary>
             <param name="diffProgram">The path to the diff program that will be launched.  If null or an empty string is passed, the VAULTDIFF environment variable will be read.</param>
             <param name="diffArguments">The arguments that will be passed into the diff program.</param>
             <param name="compareToOption">The type of diff that will be performed.  Possible values are:  &quot;current&quot;, &quot;label&quot;, &quot;lastget&quot;, &quot;local&quot;, and &quot;repository&quot;.</param>
             <param name="recursive">Recursively diff folders.</param>
             <param name="objectPathLeft">The path to the first object that will be diffed.  This can be either a repository or a local path.</param>
             <param name="objectPathRight">The value of this argument will depend on the CompareToOption that is specified.
            <ul>
            <li>CompareToOption.current: This parameter is not needed (pass null).</li>
            <li>CompareToOption.label:  This parameter is the label that was applied to the object at objectPathLeft.</li>
            <li>CompareToOption.lastget: This parameter is not needed (pass null).</li>
            <li>CompareToOption.local:  This parameter is the path to the local folder or file.</li>
            <li>CompareToOption.repository:  This parameter is the path to the repository file or folder.</li>
            </ul>
            </param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandHistoryEx(System.String,System.Boolean,VaultClientIntegrationLib.DateSortOption,System.Char,System.String,System.Char,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Int32,System.String)">
            <summary>
            Perform a full history query on the server.
            </summary>
            <param name="objectPath">The path to the object to use for the root as the history query.  This can be either a repository or a local path.</param>
            <param name="recursive">Recursively act on folders.</param>
            <param name="dateSort">Specify the sort ordering of the history results.  Possible values are:  &quot;asc&quot; and &quot;desc&quot;.</param>
            <param name="filterUserType">Specify if the user filter list will be an &quot;include&quot; ('i' | 'I') or &quot;exclude&quot; ('e' | 'E') type.</param>
            <param name="filteredUsers">A comma-separated list of users to filter within the history request.  For example, &quot;admin,builduser,bob&quot;.  Pass null to not filter out users.</param>
            <param name="filterActionType">Specify if the action filter list will be an &quot;include&quot; ('i' | 'I') or &quot;exclude&quot; ('e' | 'E') type.</param>
            <param name="filteredActions">A comma-separated list of actions to filter within the history request.  All actions are: &quot;add,branch,checkin,create,delete,label,move,obliterate,pin,propertychange,rename,rollback,share,snapshot,undelete&quot;.</param>
            <param name="beginDate">The date that will be used as the starting point for the history query.  Pass VaultDate.EmptyDate() to include all history.</param>
            <param name="endDate">The date that will be used as the ending point for the history query.  Pass VaultDate.EmptyDate() to include all history.</param>
            <param name="beginLabel">The label that will be used as the starting point for the history query.  Pass null to include all history.</param>
            <param name="endLabel">The label that will be used as the ending point for the history query.  Pass null to include all history.</param>
            <param name="beginVersion">The version that will be used as the starting point for the history query.  Pass -1 to include all history.</param>
            <param name="endVersion">The version that will be used as the ending point for the history query.  Pass -1 to include all history.</param>
            <param name="rowLimit">The maximum number of history items will be returned.</param>
            <param name="commentFilter">The substring to search for in comments.  If this is null or empty, no comment filtering will be performed.</param>
            <returns>An array of VaultHistoryItem references for each history action that the history query returned.</returns>
            , RecommendedOptionDefault("", "")
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandHistory(System.String,System.Boolean,VaultClientIntegrationLib.DateSortOption,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Int32,System.String)">
            <summary>
            Perform a exclusion only history query on the server
            </summary>
            <param name="objectPath">The path to the object to use for the root as the history query.  This can be either a repository or a local path.</param>
            <param name="recursive">Recursively act on folders.</param>
            <param name="dateSort">Specify the sort ordering of the history results.  Possible values are:  &quot;asc&quot; and &quot;desc&quot;.</param>
            <param name="excludedUsers">A comma-separated list of users to filter out of the history request.  For example, &quot;admin,builduser,bob&quot;.  Pass null to return history items for all users.</param>
            <param name="excludedActions">A comma-separated list of actions to filter out of the history request.  All actions are: &quot;add,branch,checkin,create,delete,label,move,obliterate,pin,propertychange,rename,rollback,share,snapshot,undelete&quot;.  Pass null to return history for all actions.</param>
            <param name="beginDate">The date that will be used as the starting point for the history query.  Pass VaultDate.EmptyDate() to include all history.</param>
            <param name="endDate">The date that will be used as the ending point for the history query.  Pass VaultDate.EmptyDate() to include all history.</param>
            <param name="beginLabel">The label that will be used as the starting point for the history query.  Pass null to include all history.</param>
            <param name="endLabel">The label that will be used as the ending point for the history query.  Pass null to include all history.</param>
            <param name="beginVersion">The version that will be used as the starting point for the history query.  Pass -1 to include all history.</param>
            <param name="endVersion">The version that will be used as the ending point for the history query.  Pass -1 to include all history.</param>
            <param name="rowLimit">The maximum number of history items will be returned.</param>
            <param name="commentFilter">The substring to search for in comments.  If this is null or empty, no comment filtering will be performed.</param>
            <returns>An array of VaultHistoryItem references for each history action that the history query returned.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandHistory(System.String,System.Boolean,VaultClientIntegrationLib.DateSortOption,System.String,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Int32)">
            <summary>
            Perform an exclusion history query without comments on the server.
            </summary>
            <param name="objectPath">The path to the object to use for the root as the history query.  This can be either a repository or a local path.</param>
            <param name="recursive">Recursively act on folders.</param>
            <param name="dateSort">Specify the sort ordering of the history results.  Possible values are:  &quot;asc&quot; and &quot;desc&quot;.</param>
            <param name="excludedUsers">A comma-separated list of users to filter out of the history request.  For example, &quot;admin,builduser,bob&quot;.  Pass null to return history items for all users.</param>
            <param name="excludedActions">A comma-separated list of actions to filter out of the history request.  All actions are: &quot;add,branch,checkin,create,delete,label,move,obliterate,pin,propertychange,rename,rollback,share,snapshot,undelete&quot;.  Pass null to return history for all actions.</param>
            <param name="beginDate">The date that will be used as the starting point for the history query.  Pass VaultDate.EmptyDate() to include all history.</param>
            <param name="endDate">The date that will be used as the ending point for the history query.  Pass VaultDate.EmptyDate() to include all history.</param>
            <param name="beginLabel">The label that will be used as the starting point for the history query.  Pass null to include all history.</param>
            <param name="endLabel">The label that will be used as the ending point for the history query.  Pass null to include all history.</param>
            <param name="beginVersion">The version that will be used as the starting point for the history query.  Pass -1 to include all history.</param>
            <param name="endVersion">The version that will be used as the ending point for the history query.  Pass -1 to include all history.</param>
            <param name="rowLimit">The maximum number of history items will be returned.</param>
            <returns>An array of VaultHistoryItem references for each history action that the history query returned.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandLabel(System.String,System.String,System.Int64)">
            <summary>
            Apply a label to a specific version of a Vault object.
            </summary>
            <param name="objectPath">The path to the object to label.  This can be either a repository or a local path.</param>
            <param name="labelName">The label that will be applied.  If the label has already been applied, an exception will be thrown.</param>
            <param name="versionID">The version that will have the label applied.  Pass -1 to apply a label to the latest version.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandListChangeSet(System.String[])">
            <summary>
            Return the collection of change set items that are pending.
            </summary>
            <param name="objectPaths">An array of paths to recursively search for changes.  These can be either local paths or repository paths.</param>
            <returns>The collection of change set items that are pending.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandListCheckOuts">
            <summary>
            Returns the collection of items that are checked out by all users in the repository
            </summary>
            <returns>The collection of items that are checked out by all users in the repository</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandListObjectProperties(System.String)">
            <summary>
            List the properties of a folder or file in the repositories.
            </summary>
            <param name="objectPath">The path to the object whose properties.   This can be either a repository or a local path.</param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandListFolder(System.String,System.Boolean)">
            <summary>
            List the contents of a folder.
            </summary>
            <param name="folderPath">The path to the folder whose contents you would like displayed.   This can be either a repository or a local path.</param>
            <param name="recursive">Return information about items inside this folder's children.</param>
            <returns>A VaultClientFolder object with the requested contents.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandListRepositories">
            <summary>
            Return the collection of repository information for the server that is currently connected.
            </summary>
            <returns>The collection of repository information for the server that is currently connected.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandMove(System.String,System.String)">
            <summary>
            Move a vault object from one location
            </summary>
            <param name="objectPath_From">The path to the object that will be moved.  This can be either a repository or a local path.</param>
            <param name="objectPath_To">The path to the folder into which the item is to be moved.  If the folder already exists, no object with the same name as the moving object can exist therein already.  This can be either a repository or a local path.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandObliterate(System.String)">
            <summary>
            Obliterate an object which has been deleted.  This will throw an Exception if there are multiple deleted objects at the specified path.
            Obliterate is will permanently remove a deleted folder or file (and all 
            its history) from the repository.  You must be logged in as a administrator 
            user to use this command.  This command should not be used lightly, as there 
            is no way to undo it.
            </summary>
            <param name="repositoryPath">The repository path to the object which will be obliterate.  This object must already be deleted.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandPin(System.String,System.Int32)">
            <summary>
            Pin an object at a specific version.
            </summary>
            <param name="objectPath">The path to the object that will be pinned.  This can be either a repository or a local path.</param>
            <param name="version">The version number that the object will be pinned at.  If the object doesn't have this version, an exception will be thrown.  Passing -1 will pin the object to the current version.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandRename(System.String,System.String)">
            <summary>
            Rename a Vault object in the repository.
            </summary>
            <param name="objectPath">The path to the object that will be renamed.  This can be either a repository or a local path.</param>
            <param name="newName">The new name for the object.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandRenameLabel(System.String,System.String,System.String)">
            <summary>
            Rename a label that has been applied to an Vault object.
            </summary>
            <param name="objectPath">The path to the object that has been labeled with the oldLabelName.  This can be either a repository or a local path.</param>
            <param name="oldLabelName">The label that will be renamed.  If this label hasn't been applied to the object, an exception will be thrown.</param>
            <param name="newLabelName">The new label that will given to the object.  If this label has already been applied to the object, an exception will be thrown.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandShare(System.String,System.String)">
            <summary>
            Share a Vault object from one location to another.
            </summary>
            <param name="objectPath_From">The path to the file or folder that will be shared.  This can be either a repository or a local path.</param>
            <param name="folderPath_To">The path to the folder where the shared object will be put.  This folder must already exist.  This can be either a repository or a local path.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandStatus(System.String[])">
            <summary>
            Returns the working folder status for the paths that have been passed in.
            Folders will be ignored.
            </summary>
            <param name="objectPaths"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandUncloak(System.String[])">
            <summary>
            Remove the cloak property on a folder.
            </summary>
            <param name="objectPaths">An array of paths to uncloak.  These can be either local paths or repository paths.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandUndoChangeSetItem(System.Int32)">
            <summary>
            Undo the Nth item in the internal change set.  This will undo change set items such as add, delete or rename.
            Use ListChangeSetItems to determine the id of each change set item.
            </summary>
            <param name="changeSetItemId">The index of the change set item that will be removed from the internal change set item collection.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandUndoCheckout(System.String[],System.Boolean,VaultClientOperationsLib.LocalCopyType)">
            <summary>
            Undo any checkouts for a given Vault object.
            </summary>
            <param name="objectPaths">An array of paths to the objects whose pending changes will be undone.  This can be either a repository path or a local path.  If they are repository paths, wildcards can be included see <see cref="M:VaultClientIntegrationLib.RepositoryUtil.MatchWildcardToTreeObjects(System.String)"/></param>
            <param name="recursive">Recusively undo the checkouts for subfolders.</param>
            <param name="localCopy">Controls what is done with any modified local files that are present in the working folder.  Possible values are:  "Replace", "Delete", and "Leave".</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandUnPin(System.String)">
            <summary>
            Unpin a Vault object.
            </summary>
            <param name="objectPath">The path to the file or folder that will be unpinned.  This can be either a repository or a local path.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandVersionHistory(System.String,System.Int64,VaultLib.VaultDateTime,VaultLib.VaultDateTime,System.Int32,System.String)">
            <summary>
            Lists the transactions that have been applied to a folder.
            </summary>
            <param name="folderPath">The path to the folder to query for.  This can be either a repository or a local path.</param>
            <param name="versionHistoryBeginVersion">The version number to start with.  Pass 0 to retrieve all versions.</param>
            <param name="beginDate">The earliest date/time that will be returned in the results.  Pass VaultDate.EmptyDate() to return all versions.</param>
            <param name="endDate">The latest date/time that will be returned in the results.  Pass VaultDate.EmptyDate() to return all versions.</param>
            <param name="rowLimit">The maximum number of history items will be returned.</param>
            <param name="commentFilter">The substring to search for in comments.  If this is null or empty, no comment filtering will be performed.</param>
            <returns>An array of VaultTxHistoryItems describing all of the versions that have been applied to the object in the given time frame.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandVersionHistory(System.String,System.Int64,VaultLib.VaultDateTime,VaultLib.VaultDateTime,System.Int32)">
            <summary>
            Lists the transactions that have been applied to a folder.
            </summary>
            <param name="folderPath">The path to the folder to query for.  This can be either a repository or a local path.</param>
            <param name="versionHistoryBeginVersion">The version number to start with.  Pass 0 to retrieve all versions.</param>
            <param name="beginDate">The earliest date/time that will be returned in the results.  Pass VaultDate.EmptyDate() to return all versions.</param>
            <param name="endDate">The latest date/time that will be returned in the results.  Pass VaultDate.EmptyDate() to return all versions.</param>
            <param name="rowLimit">The maximum number of history items will be returned.</param>
            <returns>An array of VaultTxHistoryItems describing all of the versions that have been applied to the object in the given time frame.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandGetBranchStructure(System.Int32,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            
            </summary>
            <param name="repID"></param>
            <param name="fullPath"></param>
            <param name="objID"></param>
            <param name="version"></param>
            <param name="bWithCurrentNames"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandTxDetail(System.Int64)">
            <summary>
            Gets the transaction information for a specific vault transaction.
            </summary>
            <param name="nTxID">The transaction id</param>
            <returns>A TxInfo object containing the transaction information.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandUpdateTxComment(System.Int64,System.Int64,System.String)">
            <summary>
            Updates the comment of a vault transaction.
            </summary>
            <param name="nTxID">the transaction id</param>
            <param name="nObjverID">the obj version id</param>
            <param name="newComment">the new comment</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.commitTransaction(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            Commits given changes only if AutoCommit is enabled.
            throws Exception if commit fails.
            </summary>
            <param name="csic">Collection of changes to commit.</param>
            <returns>null if changes were autocommited, else the original csic.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandAddRepository(System.String,System.Boolean)">
            <summary>
            Add a new repository.  You must be logged on as a user with admin rights to create a new repository.
            </summary>
            <param name="newReposName">The name of the repository that will be created.</param>
            <param name="enableSecurity">If true, enable folder security for the new repository.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandDeleteRepository(System.String)">
            <summary>
            Delete a repository.  You must be logged on as a user with admin rights to delete a repository.
            </summary>
            <param name="repositoryName">The name of the repository that will be deleted.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandAddUser(System.String,System.String,System.String)">
            <summary>
            Add a new user to Vault.  You must be logged on as a user with admin rights to add a user.
            </summary>
            <param name="login">The login name for the user.</param>
            <param name="password">The initial password for the user.</param>
            <param name="email">The email address for the user.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandResolveMerge(System.String)">
            <summary>
            Resolve Merge Status on a path.  Path can be either local or repository.  
            For repository paths, wilcards are accepted.
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandListUsers">
            <summary>
            List all the users.
            note:  this method uses the adminService, use ProcessCommandGetUsers if the logged in user may not be admin
            </summary>
            <returns>An array of VaultUser objects</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandGetUsers">
            <summary>
            List all the users.
            </summary>
            <returns>An array of VaultUser objects</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandShelve(System.String,VaultClientOperationsLib.ChangeSetItemColl,System.String,System.Int32[],VaultClientOperationsLib.ShelvesetItemIDEInfo[],System.Boolean,System.Boolean)">
            <summary>
            Shelve a set of changes.
            </summary>
            <param name="name">Shelveset name</param>
            <param name="csic">ChangeSetItemColl of changes to be shelved</param>
            <param name="comment">comment for the shelveset</param>
            <param name="bugIDs">an int[] of bugIDs to associate with the shelveset</param>
            <param name="ideInfos">an array of ShelvesetItemIDEInfo objects describing all the open ide editors (not just items passed to shelve, ClientInstance will filter list)</param>
            <param name="undoChanges">true to undo changes in the working folder, false to leave them</param>
            <param name="replace">true to automatically replace if a shelveset with the given name already exists in the database</param>
            <returns>-1 for duplicate name (if replace == false), 0 for other failure, 1 for success</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandGetShelvesetList(System.Int32,System.Int32)">
            <summary>
            Get an array of ShelvesetSummary objects for the given user and repository.
            </summary>
            <param name="userid"></param>
            <param name="repid"></param>
            <returns>an array of ShelvesetSummary objects for the given user and repository</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandGetShelvesetDetails(System.Int32,System.Int32,System.String)">
            <summary>
            Get the ShelvesetDetails object given a user id, repository id, and the Shelveset name.
            </summary>
            <param name="userid">id for the creator of the Shelveset</param>
            <param name="repid">id for the repository the Shelveset was created on</param>
            <param name="ssName">name of the Shelveset</param>
            <returns>a ShelvesetDetails object</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandRenameShelveset(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Rename a Shelveset.
            </summary>
            <param name="userid">userid of the Shelveset creator</param>
            <param name="repid">repid for the repository the Shelveset was created in</param>
            <param name="ssName">current Shelveset name</param>
            <param name="ssNewName">new Shelveset name</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandDeleteShelveset(System.Int32,System.Int32,System.String)">
            <summary>
            Delete a Shelveset.
            </summary>
            <param name="userid">userid of the Shelveset creator</param>
            <param name="repid">repid for the repository the Shelveset was created in</param>
            <param name="ssName">Shelveset name</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandPrepareShelveFilesForDiff(VaultClientOperationsLib.DiffShelvedAgainstType,VaultLib.ShelvesetItem,VaultClientOperationsLib.VaultClientFile)">
            <summary>
            Prepare 2 files to diff, based on a selected ShelvesetItem and a DiffShelvedAgainstType.
            </summary>
            <param name="diffType">DiffShelvedAgainstType, describing the type of diff to perform</param>
            <param name="si">The ShelvesetItem the diff was initiated from.</param>
            <param name="vcf">The VaultClientFile the ShelvesetItem refers to.</param>
            <returns>A ShelveDiffInfo object containing the paths to the diff items and an int describing errors, if any.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.ProcessCommandFindInFilesByFolder(System.String,System.String,System.Boolean,System.String[],System.String[],System.Boolean,System.Boolean,VaultLib.VaultFindInFilesDefine.PatternMatch)">
            <summary>
            Method will run a find in files using a folder path
            </summary>
            <param name="strSearchString"></param>
            <param name="strFolderPath"></param>
            <param name="bRecursive"></param>
            <param name="arIncludedFiles"></param>
            <param name="arExcludedFiles"></param>
            <param name="bMatchCase"></param>
            <param name="bMatchWord"></param>
            <param name="pm"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.BuildTreeForShelvesetDiff(VaultLib.ShelvesetDetails,System.String)">
            <summary>
            
            </summary>
            <param name="shelveset"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.BuildTreeForShelvesetDiffBaseline(VaultLib.ShelvesetDetails,System.String)">
            <summary>
            
            </summary>
            <param name="shelveset"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.WriteChangeSet(VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            
            </summary>
            <param name="changeset"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.GetWorkingFolderAssignments">
            <summary>
            Return information about the working folder assignments for the currently logged in user.
            </summary>
            <returns>A sorted list whose keys will be the repository paths and values will be the corresponding disk path mapping.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.RemoveWorkingFolder(System.String,System.Boolean)">
            <summary>
            Delete a working folder assignment.
            </summary>
            <param name="repositoryFolderPath">The path to the repository folder whose working folder association will be deleted.</param>
            <param name="recursive">True to recursively remove working folder settings from subfolders.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.RemoveWorkingFolder(System.String)">
            <summary>
            Delete a working folder assignment.
            </summary>
            <param name="repositoryFolderPath">The path to the repository folder whose working folder association will be deleted.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.isConnected">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.SetLoginOptions(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Set the login options that will be used when connecting to Vault.  This command does not trigger a login.
            </summary>
            <param name="URL">The URL to the Vault server.  For example &quot;http://localhost/VaultService&quot;</param>
            <param name="user">The username to use to log in to Vault.</param>
            <param name="password">The password to use for authentication.</param>
            <param name="repository">The name of the repository to connect to.  If this is null, then no repository will be connected to.</param>
            <param name="saveSession">If saveSession is true, then the information will be stored on disk and used to automatically connect in the future (until the PurgeSession command is invoked).</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.Login(VaultClientNetLib.VaultConnection.AccessLevelType,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="altCommand"></param>
            <param name="bAllowAuto"></param>
            <param name="bSaveSession"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.SetRepository(System.String)">
            <summary>
            Connect to the specified Vault repository.
            </summary>
            <param name="repositoryName">The name of the repository to connect to.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.SetRepository(VaultLib.VaultRepositoryInfo)">
            <summary>
            
            </summary>
            <param name="repositoryInfo"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.Login">
            <summary>
            
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.Logout">
            <summary>
            Disconnect from the Vault server.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.GetUsers">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.GetUsersRights(System.Int32)">
            <summary>
            
            </summary>
            <param name="userid"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.SetWorkingFolder(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set a working folder association between a repository folder and a location on disk.
            </summary>
            <param name="repositoryFolderPath">The path to the repository folder.</param>
            <param name="diskPath">The path to a directory on disk.</param>
            <param name="createDiskPath">If createDiskPath is true, diskPath will be created if it doesn't exist.</param>
            <param name="forceSubfoldersToInherit">True to force subfolders to inherit this working folder setting.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.SetWorkingFolder(System.String,System.String,System.Boolean)">
            <summary>
            Set a working folder association between a repository folder and a location on disk.
            </summary>
            <param name="repositoryFolderPath">The path to the repository folder.</param>
            <param name="diskPath">The path to a directory on disk.</param>
            <param name="createDiskPath">If createDiskPath is true, diskPath will be created if it doesn't exist.</param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.GetRepositoryId(System.String)">
            <summary>
            Return the repository id that corresponds to the given repository name
            </summary>
            <param name="repositoryName">The name of a Vault repository.</param>
            <returns>The repository id that matches the name provided.</returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.DecodeUserRights(System.UInt32)">
            <summary>
            
            </summary>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.PurgeSession">
            <summary>
            Remove login information that was previously cached with SetLoginOptions
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.NewMessageHandler(System.Object,VaultClientOperationsLib.ProgressMessage)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.ServerOperations.NewBulkMessagesHandler(System.Object,VaultClientOperationsLib.ProgressMessage[])">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="aProgressMessages"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.ServerOperations.client">
            <summary>
            The ClientConnection object.  An encapsulation of the server connection.
            </summary>
        </member>
        <member name="E:VaultClientIntegrationLib.ServerOperations.UserMessage">
            <summary>
            This event is fired every time that a string should be output to the user.
            </summary>
        </member>
        <member name="E:VaultClientIntegrationLib.ServerOperations.ChangesetOutput">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.ServerOperations.HistoryFilterType">
            <summary>
            enum used to control if user/action filters are include or exclude
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.ServerOperations.UserMessageEventHandler">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="message"></param>
        </member>
        <member name="T:VaultClientIntegrationLib.ServerOperations.ChangesetOutputEventHandler">
            <summary>
            
            </summary>
            <param name="changeset"></param>
        </member>
        <member name="T:VaultClientIntegrationLib.BackupOption">
            <summary>
            Describes what can be done with locally modified files when a get is performed.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.BackupOption.yes">
            <summary>
            Backup files.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.BackupOption.no">
            <summary>
            Do not backup files.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.BackupOption.usedefault">
            <summary>
            Use the default behavior in the user's options.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.DateSortOption">
            <summary>
            Controls how the output of the history command is sorted.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.DateSortOption.asc">
            <summary>
            Sort history items from oldest to newest.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.DateSortOption.desc">
            <summary>
            Sort history items from newest to oldest.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.CompareToOption">
            <summary>
            Describes the distinct kinds of comparisons that can be done.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.CompareToOption.current">
            <summary>
            Compares to the latest version in the repository.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.CompareToOption.label">
            <summary>
            Compares to a specific label.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.CompareToOption.lastget">
            <summary>
            Compares with the last version that was downloaded from the server (the "baseline" version).
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.CompareToOption.local">
            <summary>
            Compares with a file or folder at a local path.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.CompareToOption.repository">
            <summary>
            Compares with a file or folder at the given repository path.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.ShelveDiffInfo">
            <summary>
            An object for holding the paths to 2 items to diff and an int to describe any
            errors that occured during the get of those items.
            
            This class was made to facilitate the diff of shelved items from Eclipse.  The 
            method that preps the diff has 2 ref params plus a return value, Eclipse can't 
            handle the refs.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.TxInfo">
            <summary>
            An object containing the following information for a specific vault transaction:  
            the user's id, the user's login, the comment, and an array of VaultTxDetailHistoryItem 
            objects.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.TxInfo.userid">
            <summary>
            The id of the user who completed the transaction.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.TxInfo.userlogin">
            <summary>
            The login of the user who completed the transaction.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.TxInfo.changesetComment">
            <summary>
            The changeset comment for the transaction.
            </summary>
        </member>
        <member name="F:VaultClientIntegrationLib.TxInfo.items">
            <summary>
            An array of the items included in the transaction.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.TxInfo.#ctor(System.Int32,System.String,System.String,VaultLib.VaultTxDetailHistoryItem[])">
            <summary>
            TxInfo Constructor
            </summary>
            <param name="id">The id of the user who completed the transaction.</param>
            <param name="login">The login of the user who completed the transaction.</param>
            <param name="comment">The changeset comment for the transaction.</param>
            <param name="items">The items included in the transation.</param>
        </member>
        <member name="T:VaultClientIntegrationLib.RecommendedOptionDefault">
            <summary>
            Allows the specification of a recommended default value for a parameter.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.RecommendedOptionDefault.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="option"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.RecommendedOptionDefault.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="defaultValue"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.RecommendedOptionDefault.Option">
            <summary>
            
            </summary>
        </member>
        <member name="P:VaultClientIntegrationLib.RecommendedOptionDefault.DefaultValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.WildcardArray">
            <summary>
            Specifies a parameter of type String[] which is an array of wildcard strings.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.WildcardArray.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="option"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.WildcardArray.Option">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.LocalPathOnly">
            <summary>
            Specifies a parameter that only accepts a local path.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.LocalPathOnly.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="option"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.LocalPathOnly.Option">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.LocalOrRemotePath">
            <summary>
            Specifies a parameter that will accept either a remote or local path.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.LocalOrRemotePath.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="option"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.LocalOrRemotePath.Option">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.RemotePathOnly">
            <summary>
            Specifies a parameter that will only accept a remote path.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.RemotePathOnly.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="option"></param>
        </member>
        <member name="P:VaultClientIntegrationLib.RemotePathOnly.Option">
            <summary>
            
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.DoesNotRequireLogin">
            <summary>
            Specifies a method does not require login.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.DoesNotRequireRepository">
            <summary>
            Specifies a method does not require a repository be set.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.Hidden">
            <summary>
            Specifies that a method should be hidden from nant.
            </summary>
        </member>
        <member name="T:VaultClientIntegrationLib.XmlHelper">
            <summary>
            Summary description for XmlOutput.
            </summary>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultClientOperationsLib.ChangeSetItemColl)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="csic"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,System.Collections.SortedList)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="list"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultClientOperationsLib.VaultClientFolder)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="vcfolder"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultLib.VaultHistoryItem[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="histitems"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultLib.VaultRepositoryInfo[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="repositories"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultLib.VaultTxHistoryItem[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="histitems"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultClientIntegrationLib.TxInfo)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="info"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultLib.FindInFilesData[])">
            <summary>
            Method will write Find in File Results the the xml writer
            </summary>
            <param name="xml"></param>
            <param name="arFiFData"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisProject[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="projects"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisCategory[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="categories"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisMilestone[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="milestones"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisPlatform[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="platforms"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisPriority[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="priorities"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisStatus[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="statuses"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisTimeUnit[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="timeUnits"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisTimeEstimate[])">
            <summary>
            Method to write the deprecated MantisTimeEstimate class to an Xml Writer.
            </summary>
            <param name="xml"></param>
            <param name="timeEstimates"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisUser[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="users"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisCustomLabel[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="labels"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisItemType[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="types"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,VaultClientIntegrationLib.FortressItemExpanded)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisItemExpanded)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisItemExpanded[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="items"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisItem)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisItemFullDetail)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="item"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MilestoneAaG[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="aag"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.SavedQuery)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="sq"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.SavedQuery[])">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="queries"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,MantisLib.MantisItemAttachmentFullDetail)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="att"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,System.String)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="str"></param>
        </member>
        <member name="M:VaultClientIntegrationLib.XmlHelper.XmlOutput(System.Xml.XmlWriter,System.Int32)">
            <summary>
            
            </summary>
            <param name="xml"></param>
            <param name="i"></param>
        </member>
    </members>
</doc>
